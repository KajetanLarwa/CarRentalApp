trigger:
- master

resources:
- repo: self

variables:
  major: 1
  minor: 1

name: $(major).$(minor)$(Rev:.r)

stages:
- stage:
  displayName: Build_Master_Version_Number
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: Build_Master_Version_Number
    variables:
       patch: $[counter(variables['minor'], 0)]
    steps:
      - bash: |
           echo "##vso[build.updatebuildnumber]$(major).$(minor).$(patch)"
        name: SetMasterBuildName
- stage:
  displayName: Build_Branch_Version_Number
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: Build_Branch_Version_Number
    variables:
       brpatch: $[counter(variables['build.sourcebranchname'], 0)]
    steps:
      - bash: |
           echo "##vso[build.updatebuildnumber]$(major).$(minor)-$(Build.SourceBranchName).$(brpatch)"
        condition: ne(variables['Build.Reason'], 'PullRequest')
        name: SetBranchBuildName
- stage: BuildAndTest
  displayName: Build & Test
  jobs:
  - job: Backend
    displayName: Backend
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        workingDirectory: backend
        configuration: $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: "dotnet test"
      inputs:
        command: 'test'
        workingDirectory: backend
        arguments: '--collect "Code coverage"'
    - task: PublishTestResults@2
      displayName: Publish .NET Core test results and coverage
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
  - job: Frontend
    displayName: Frontend
    steps:
    - task: Npm@1
      displayName: 'npm install'
      inputs:
        command: install
        workingDir: frontend
    - task: Npm@1
      displayName: 'npm build'
      inputs:
        command: custom
        workingDir: frontend
        customCommand: 'build'
    - task: Npm@1
      displayName: 'npm run test'
      inputs:
        command: custom
        customCommand: run test -- --watch=false --code-coverage
        workingDir: frontend
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Angular code coverage'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'coverage/cobertura-coverage.xml'
        reportDirectory: coverage
        failIfCoverageEmpty: true
    - task: PublishTestResults@2
      displayName: 'Publish Angular test results'
      condition: succeededOrFailed()
      inputs:
        searchFolder: $(System.DefaultWorkingDirectory)/junit
        testRunTitle: Angular
        testResultsFormat: JUnit
        testResultsFiles: "**/TESTS*.xml"
- stage: Deploy
  displayName: Build and deploy Docker images
  jobs:
  - job: BuildBackend
    displayName: Build backend image
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'dotnetrulez/carrentalbackend'
        command: 'buildAndPush'
        Dockerfile: 'backend/Dockerfile'
        buildContext: 'backend'
  - job: BuildFrontend
    displayName: Build fontend image
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'dotnetrulez/carrentalfrontend'
        command: 'buildAndPush'
        Dockerfile: 'frontend/Dockerfile'